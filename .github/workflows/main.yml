name: no20 CI/CD pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      REST_API_KEY: ${{ secrets.REST_API_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      REDIRECT_URI:  ${{ secrets.REDIRECT_URI }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # Docker 빌드 및 Docker Hub에 푸시
      - name: Docker build & push to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test:latest

      # EC2에 배포
      - name: Docker image pull & deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 최신 이미지 Pull
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
            
            # 기존 컨테이너 중지 및 삭제
            if [ "$(sudo docker ps -q -f name=docker-test)" ]; then
              sudo docker stop docker-test
              sudo docker rm docker-test
            fi
            
            # 환경 변수 파일 생성
            echo "DB_URL=${{ secrets.DB_URL }}" > ~/.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> ~/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ~/.env
            echo "REST_API_KEY=${{ secrets.REST_API_KEY }}" >> ~/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ~/.env
            echo "REDIRECT_URI=${{ secrets.REDIRECT_URI }}" >> ~/.env
            
            # 새 컨테이너 실행 및 환경 변수 전달
            sudo docker run -d --log-driver=syslog --name docker-test -p 8080:8080 \
              --env-file ~/.env \
              ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
            
            # 실행 중인 컨테이너 확인
            sudo docker ps -a | grep "docker-test"
            
            # 사용하지 않는 이미지 및 컨테이너 정리
            sudo docker image prune -a -f